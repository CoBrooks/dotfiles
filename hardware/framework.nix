# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/a65fe048-3808-4eb3-a712-f06894d817c3";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/6C7C-4F9E";
      fsType = "vfat";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  networking.enableIPv6 = lib.mkDefault true;
  # networking.interfaces.enp0s20u2.useDHCP = lib.mkDefault true;

  hardware.bluetooth.enable = true;

  networking.firewall.allowedTCPPorts = [ 3000 9323 ];

  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.opengl = let 
    # Vulkan layers
    fn = oa: {
      nativeBuildInputs = oa.nativeBuildInputs ++ [pkgs.glslang];
      mesonFlags = oa.mesonFlags ++ ["-Dvulkan-layers=device-select,overlay"];
      postInstall = oa.postInstall + ''
        mv $out/lib/libVkLayer* $drivers/lib

        # Device select layer
        layer=VkLayer_MESA_device_select
        substituteInPlace $drivers/share/vulkan/implicit_layer.d/''${layer}.json \
          --replace "lib''${layer}" "$drivers/lib/lib''${layer}"

        # Overlay layer
        layer=VkLayer_MESA_overlay
        substituteInPlace $drivers/share/vulkan/explicit_layer.d/''${layer}.json \
          --replace "lib''${layer}" "$drivers/lib/lib''${layer}"
      '';
    };
  in with pkgs; {
    enable = true;
    driSupport32Bit = true;
    # package = (mesa.overrideAttrs fn).drivers;
    # Video acceleration for Intel iGPUs
    extraPackages = [
      intel-media-driver
      vaapiIntel
      vaapiVdpau
      libvdpau-va-gl
    ];
  };
}
